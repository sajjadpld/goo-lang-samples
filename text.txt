command:
    go mod init <module-path>

    create a new module
    module path can be a repository path like github/sajjadpld/test

    it make go.mod file


-------------------------------------------------------------------------------

all our code must be in a package.
in go files at the begining add this:

package main

the first statment in Go file must be package name.

--------------------------------------------------------------------------------

func main(){}

this is a Go project entery point.

a application must have a main function or an entery point only

--------------------------------------------------------------------------------

for importing packages use:

import "fmt"

or

import (
    fmt
)

now we imported fmt package

------------------------------------------------------------------------------------

a package is a collection of source files

---------------------------------------------------------------------------------

for running a Go file, we must run below command:
go run file_name.go

-------------------------------------------------------------------------------------

a simple hello world app

package main

import "fmt"

func main(){
	fmt.Println("hello world")
}


-----------------------------------------------------------------------------------------

variable declaration:

var name = "sajjad"

or

name := "sajjad"


------------------------------------------------------------------------------------------

variables and imported package must be use, if you dont use them, you get compile error

------------------------------------------------------------------------------------------

declar a constant:

const age = 24

--------------------------------------------------------------------------------------------

sample code for formatting output:

++++++++++++++++++++++++++
package main

import "fmt"

func main() {

	var name = "sajjad"
	family := "PLD"

	const age = 24

	fmt.Printf("Hi, my name is %v and my last name is %v, im %v years old", name, family, age)
}
+++++++++++++++++++++++++++++++

output is :
Hi, my name is sajjad and my last name is PLD, im 24 years old

--------------------------------------------------------------------------------------------

for initial an variable for later, we must declare the variable type:

	var fatherName string

	fatherName = "Mahmoud"

	fmt.Println(fatherName)

--------------------------------------------------------------------------------------------

for print variable type:

fmt.Printf("the type of fatherName is %T\n", fatherName)

%T is for getting variable Type

--------------------------------------------------------------------------------------------------

you can write these too:

var v1 int = 85
const c1 string = "sajjad"

these are as same as below:

var v1 = 85
const c1 = "sajjad"

or for var is:
v1 := 85

-----------------------------------------------------------------------------------------------------

compare to Java data type:

Go          Java
int8    =>  byte
int16    =>  short
int32    =>  int
int64    =>  long

Go          Java
uint8    =>  ubyte
uint16    =>  ushort
uint32    =>  uint
uint64    =>  ulong

-----------------------------------------------------------------------------------------------------

pointers in Go

	var fatherName string

	fatherName = "Mahmoud"

	fmt.Println(fatherName)

	fmt.Println(&fatherName)

variable address to its value in memory (pointer) in Go is "&"

the output is:
Mahmoud
0xc000046290

--------------------------------------------------------------------------------------------------------

for getting user input sample code:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package main

import "fmt"

func main(){
	var gfName string
	fmt.Scan(&gfName)

	fmt.Printf("your gir friend name is %v", gfName)
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

---------------------------------------------------------------------------------------------------------

in Go arrays are fixed size

for declare an arraye use this:
++++++++++++++++++++++++++++++++++++++++++++++++
	var books = [3]string {"a","b","c"}

	fmt.Println(books)
+++++++++++++++++++++++++++++++++++++++++++++++++

the output is :
[a b c]

---------------------------------------------------------------------------------------------------------

for declaring empty array and fill array index use this:
+++++++++++++++++++++++++++++++++++++++++++++
	var books [3]string

	books[0] = "a"
	books[1] = "b"
	books[2] = "c"

	fmt.Println(books)
+++++++++++++++++++++++++++++++++++++++++++++

the output is :
[a b c]

-----------------------------------------------------------------------------------------------------------

for getting arraye size or length use this:

len(array)

-----------------------------------------------------------------------------------------------------------

when we dont know the size of the array for declaration array, we can use slice.
slice basicly is an abstraction of anj array, so it uses the array type under the hood but has dynamic size.

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	var books []string

	books = append(books, "a")
	books = append(books, "b")
	books = append(books, "c")

	fmt.Println(books)
	fmt.Println(books[0])
	fmt.Println(len(books))
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

or use this instead of first line:

books := []string{}

-----------------------------------------------------------------------------------------------------------------

in Go we jus have "for" for loop.
no "while", "do while" and "foreach"!

for declare an infinite loop:

++++++++++++++++++++++++++++++++++++
	for {
		fmt.Println("line")
	}
++++++++++++++++++++++++++++++++++++

----------------------------------------------------------------------------------------------------------------

"rage" iterates over elements for different data structures (so not only arrayes and slices). for arrayes and slices, "range" provides the "index" and "value" for each element.

+++++++++++++++++++++++++
	var books = [8]string {"a", "b","c", "d","e", "f","g", "h"}

	for index, value := range books {
		fmt.Println(index, value)
	}
++++++++++++++++++++++++++++

the output is :
0 a
1 b
2 c
3 d
4 e
5 f
6 g
7 h


you can ignore unuse variable:

+++++++++++++++++++++++++
	var books = [8]string {"a", "b","c", "d","e", "f","g", "h"}

	for _, value := range books {
		fmt.Println(value)
	}
++++++++++++++++++++++++++++

or

+++++++++++++++++++++++++
	var books = [8]string {"a", "b","c", "d","e", "f","g", "h"}

	for index, _ := range books {
		fmt.Println(index)
	}
++++++++++++++++++++++++++++

------------------------------------------------------------------------------------------------------------------------

strings.Fields("str with space")

it spilite string by spaces and return an array

++++++++++++++++++++++++++++++++++++++++++++++++++++
package main

import (
	"fmt"
	"strings"
)

func main() {
	str := "my name is sajjad"

	fmt.Println(strings.Fields(str))
}
++++++++++++++++++++++++++++++++++++++++++++++++++
the output is :
[my name is sajjad]

---------------------------------------------------------------------------------------------------------------------------
